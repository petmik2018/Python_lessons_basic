# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y

# определяются положения символов =, x, и + в исходной строке
positionEq = equation.index("=")
positionX = equation.index("x")
positionPlus = equation.index("+")

k = equation[positionEq+1:positionX] #вырезается k, возможно, с пробелами спереди и сзади
b = equation[positionPlus+1:]	#вырезается b, возможно, с пробелами спереди

# вычисление и вывод результата
y = float(k) * x + float(b)
print("Ответ: Y ({}) = {}".format(x, y))

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты

date = '15.09.1988'

# Примеры некорректных дат
#date = '01.22.1001'
#date = '1.12.1001'
#date = '-2.10.3001'

comment = ""
daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

if len(date) != 10:
	comment = "длина строки должна быть 10 символов"
else:
	if date[2] != "." or date[5] != ".":
		comment = "где-то не там точки стоят"
	else:
		year = int(date[-4:])
		if year < 1: # в этой постановке задачи все значения годятся кроме 0
			comment = "год не может быть нулевым"
		else:
			day = int(date[:2])
			month = int(date[3:5])
			if month < 1 or month > 12:
				comment = "неправильно указан месяц"
			elif day == 29 and month == 2 and year % 4 == 0: # исключение для 29 февраля високосного года
				pass
			else:
				if day < 1 or day > daysInMonth[month-1]:
					comment = "неправильно указан день"

if comment == "":
	print("Дата задана корректно")
else:
	print("Дата задана некорректно,", comment)


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3


apartNumber = 13

floors = [] # список этажей с количеством квартир на каждом
floorType = 0 # количество квартир на текущем этаже
continueCircle = True
apartNumberDraft = 0 # номер последней квартиры на искомом этаже 

# цикл останавливается, если номер последней квартиры на текужем этаже превышает заданный
while continueCircle:
	floorType += 1
	for i in range(0, floorType): # перебор всех этажей с количеством квартир floorType
		floors.append(floorType)
		apartNumberDraft += floorType 
		if apartNumberDraft >= apartNumber:
			continueCircle = False # мы уже на нужном этаже, выходим из цикла
			break
			
# можно для наглядности или проверки вывести список с количеством квартир на каждом этаже	
# print(floors) 

place = floorType + apartNumber - apartNumberDraft # вычисляется позиция квартиры на этаже 1<=...<=floorType

print("Apartment No {} is located on the floor {} , place {}".format(apartNumber, len(floors), place) )